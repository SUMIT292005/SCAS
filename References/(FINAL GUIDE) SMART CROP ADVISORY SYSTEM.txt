FINAL SMART CROP ADVISORY SYSTEM – DEVELOPMENT PLAN
🔄 Iterative | 📦 Modular | 📁 File-Wise | 🌐 Web-Integrated | 🧹 In-Notebook Data Cleaning
🟩 STEP 0: Initial Setup (One-Time)
🔧 Tasks:
 Create folders and environment

 Install dependencies via requirements.txt

 Create .env for API keys

 Test basic Weather API call

📁 Files Created or Modified:
requirements.txt

.env (contains API keys)

web_app/app.py – base Flask app

web_app/templates/index.html – base layout with hidden sections

utils/api_weather.py – function to fetch weather

utils/fertilizer_rules.py – reusable fertilizer logic

🔷 STEP 1: Model 1 – Crop Recommender
🧠 Goal: Recommend top crops using soil + live weather
📊 Data: crop_recommendation.csv
🌐 API: Fetch live weather via OpenWeatherMap

✅ 1A. Model Development
Input: N, P, K, pH + temperature, humidity, rainfall

Output: Top 2–3 crop suggestions

Data cleaning inside 01_crop_recommender.ipynb

📁 Files:
notebooks/01_crop_recommender.ipynb

models/model1_crop_recommender.pkl

data/raw/crop_recommendation.csv

✅ 1B. Web Integration
Inputs:
N, P, K, pH

Location → fetch weather (via API)

Output:
Crop list (with optional images)

📁 Web Files:
web_app/templates/index.html – add Crop Recommendation form & results

web_app/app.py – add route: /recommend_crop

web_app/dashboard_helpers.py – functions:

load_model1_crop_recommender()

get_weather_from_api(location)

utils/api_weather.py – get_weather(location)

🔷 STEP 2: Model 3 – Yield Predictor
🧠 Goal: Predict expected yield
📊 Data: agcensus_maharashtra.csv + crop + weather

✅ 2A. Model Development
Input: Crop, NPK, pH, weather, optional disease

Output: Yield prediction (tons/ha)

Data cleaning inside 03_yield_predictor.ipynb

📁 Files:
notebooks/03_yield_predictor.ipynb

models/model3_yield_predictor.pkl

data/raw/agcensus_maharashtra.csv

✅ 2B. Web Integration
Inputs:
Crop (from M1), soil + weather inputs

Output:
Yield estimate (shown after crop)

📁 Web Files:
web_app/templates/index.html – add Yield Prediction section

web_app/app.py – /predict_yield

web_app/dashboard_helpers.py – predict_yield()

🔷 STEP 3: Model 5 – Profit Predictor
🧠 Goal: Estimate profit
📊 Data: market_prices.csv or manual entry

✅ 3A. Model Development
Input: Yield + price

Output: Revenue = yield × price

Cleaning if needed inside 05_profit_predictor.ipynb

📁 Files:
notebooks/05_profit_predictor.ipynb

models/model5_profit_predictor.pkl (or direct logic)

data/raw/market_prices.csv

✅ 3B. Web Integration
Inputs:
Predicted yield + crop price

Output:
Revenue/Profit in ₹

📁 Web Files:
web_app/templates/index.html – add Profit Estimation section

web_app/app.py – /predict_profit

web_app/dashboard_helpers.py – calculate_profit()

🔷 STEP 4: Model 4a – Fertilizer Advisor (Growth)
🧠 Goal: Suggest fertilizers for healthy growth
📊 Data: JSON rules

✅ 4A. Rule Logic
Input: Crop + NPK + pH

Output: Fertilizer recommendation

📁 Files:
utils/fertilizer_rules.py – get_growth_fertilizer()

models/model4_fertilizer_advisor_rules.json

✅ 4B. Web Integration
Inputs:
Crop + soil info

Output:
Growth fertilizers

📁 Web Files:
web_app/templates/index.html – add Fertilizer suggestion card

web_app/app.py – /suggest_fertilizer

web_app/dashboard_helpers.py – suggest_growth_fertilizer()

🔷 STEP 5: Model 6 – Pest Risk Predictor
🧠 Goal: Warn about pest risk
📊 Data: pest_rules.csv + weather

✅ 5A. Rule-Based Logic
Input: Weather + crop

Output: Pest risk level

📁 Files:
notebooks/06_pest_risk_model.ipynb

models/model6_pest_risk_predictor.pkl (or rules-only)

data/raw/pest_rules.csv

✅ 5B. Web Integration
Inputs:
Crop + weather (auto)

Output:
Color-coded risk level (Low/Med/High)

📁 Web Files:
web_app/templates/index.html – add Pest Risk section

web_app/app.py – /predict_pest_risk

web_app/dashboard_helpers.py – predict_pest_risk()

🔴 STEP 6: Model 2 – Disease Detector (CNN)
🧠 Goal: Detect plant diseases from image
📊 Data: plantvillage_images/

✅ 6A. Model Development
Input: Leaf image

Output: Disease class or "Healthy"

Image preprocessing inside 02_disease_detector_CNN.ipynb

📁 Files:
notebooks/02_disease_detector_CNN.ipynb

models/model2_disease_detector.h5

data/raw/plantvillage_images/

✅ 6B. Web Integration
Inputs:
File upload (image)

Output:
Disease class

📁 Web Files:
web_app/templates/index.html – add image upload UI

web_app/app.py – /detect_disease

web_app/dashboard_helpers.py – detect_disease_from_image()

🔴 STEP 7: Model 4b – Treatment Advisor
🧠 Goal: Suggest treatment based on disease
📊 Data: Extended fertilizer rules

✅ 7A. Rule Logic
Input: Detected disease + crop

Output: Suggested pesticide/fungicide

📁 Files:
models/model4_fertilizer_advisor_rules.json (extended)

utils/fertilizer_rules.py – get_treatment_fertilizer()

✅ 7B. Web Integration
Inputs:
Detected disease

Output:
Treatment recommendation

📁 Web Files:
web_app/templates/index.html – add Treatment section

web_app/app.py – /recommend_treatment

web_app/dashboard_helpers.py – recommend_treatment()

✅ FINAL POLISH & DEPLOY
🛠️ UI Finishing
Use collapsible panels or tabs

Highlight results with colors/icons

Add loading spinners and validations

🚀 Deployment
Test entire pipeline

Host using Render / Railway

Push to GitHub


Crop-Advisory-System/
│
├── 📁 data/
│   ├── 📁 raw/
│   │   ├── crop_recommendation.csv
│   │   ├── plantvillage_images/          # Contains folders of each crop's leaf images
│   │   ├── agcensus_maharashtra.csv
│   │   ├── soil_health_maharashtra.csv
│   │   ├── market_prices.csv
│   │   └── pest_rules.csv (optional)
│   │
│   ├── 📁 processed/
│   │   ├── filtered_crops.csv
│   │   ├── cleaned_yield_data.csv
│   │   └── final_crop_dataset.csv
│   │   └── average_data.xlsx
│   │
│   │
│   └── 📁 external_api/
│       ├── weather_api_response_samples.json
│       └── soil_api_response_samples.json
│
├── 📁 models/
│   ├── model1_crop_recommender.pkl
│   ├── model2_disease_detector.h5
│   ├── model3_yield_predictor.pkl
│   ├── model4_fertilizer_advisor_rules.json
│   ├── model5_profit_predictor.pkl
│   └── model6_pest_risk_predictor.pkl
│
├── 📁 notebooks/
│   ├── 01_crop_recommender.ipynb
│   ├── 02_disease_detector_CNN.ipynb
│   ├── 03_yield_predictor.ipynb
│   ├── 04_fertilizer_recommender.ipynb
│   ├── 05_profit_predictor.ipynb
│   └── 06_pest_risk_model.ipynb
│
├── 📁 utils/
│   ├── _init_.py
│   ├── model_helpers.py
│   ├── api_weather.py
│   └── fertilizer_rules.py
│
├── 📁 web_app/
│   ├── 📁 static/
│   │   ├── css/
│   │   ├── js/
│   │   └── images/
│   ├── 📁 templates/
│   │   └── index.html
│   ├── app.py                  # Flask or FastAPI main file
│   └── dashboard_helpers.py
│
├── requirements.txt
├── README.md
└── .gitignore


